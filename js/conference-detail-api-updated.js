// Conference detail page JavaScript logic - API version s·ª≠a l·ªói

document.addEventListener('DOMContentLoaded', function() {
    loadConferenceDetail();
});

async function loadConferenceDetail() {
    // Get conference ID from URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const conferenceId = urlParams.get('id');
    
    if (!conferenceId) {
        showConferenceNotFound();
        return;
    }
    
    // Display loading indicator
    showLoadingIndicator();

    try {
        let conferenceData = null;
        
        // 1. Th·ª≠ API m·ªõi ƒë·∫ßu ti√™n v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n
        try {
            console.log(`Trying new API: api/conference_by_id.php?id=${conferenceId}`);
            const response1 = await fetch(`api/conference_by_id.php?id=${conferenceId}`, {
                cache: 'no-cache',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });
            
            if (response1.ok) {
                const rawText1 = await response1.text();
                console.log("Raw response from new API:", rawText1.substring(0, 200));
                
                // Ki·ªÉm tra xem response c√≥ ph·∫£i l√† JSON kh√¥ng
                if (rawText1.trim().startsWith('{') || rawText1.trim().startsWith('[')) {
                    const result = JSON.parse(rawText1);
                    if (result.status && result.data) {
                        conferenceData = result.data;
                        console.log("‚úÖ D·ªØ li·ªáu t·ª´ API m·ªõi:", conferenceData);
                    }
                } else {
                    console.warn("API m·ªõi tr·∫£ v·ªÅ HTML thay v√¨ JSON:", rawText1.substring(0, 100));
                }
            }
        } catch (err1) {
            console.warn("‚ùå Kh√¥ng th·ªÉ s·ª≠ d·ª•ng API m·ªõi:", err1.message);
        }
        
        // 2. N·∫øu API m·ªõi kh√¥ng th√†nh c√¥ng, th·ª≠ API c≈©
        if (!conferenceData) {
            try {
                console.log(`Trying old API: api/conferences.php?id=${conferenceId}`);
                const response2 = await fetch(`api/conferences.php?id=${conferenceId}`, {
                    cache: 'no-cache',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response2.ok) {
                    const rawText2 = await response2.text();
                    console.log("Raw response from old API:", rawText2.substring(0, 200));
                    
                    // Ki·ªÉm tra xem response c√≥ ph·∫£i l√† JSON kh√¥ng
                    if (rawText2.trim().startsWith('{') || rawText2.trim().startsWith('[')) {
                        const result = JSON.parse(rawText2);
                        if (result.status && result.data) {
                            conferenceData = result.data;
                            console.log("‚úÖ D·ªØ li·ªáu t·ª´ API c≈©:", conferenceData);
                        } else {
                            console.warn("API c≈© tr·∫£ v·ªÅ status false:", result);
                        }
                    } else {
                        console.warn("API c≈© tr·∫£ v·ªÅ HTML thay v√¨ JSON:", rawText2.substring(0, 100));
                    }
                } else {
                    console.error("API c≈© tr·∫£ v·ªÅ l·ªói HTTP:", response2.status);
                }
            } catch (err2) {
                console.warn("‚ùå L·ªói khi g·ªçi API c≈©:", err2.message);
            }
        }
        
        // 3. N·∫øu v·∫´n kh√¥ng c√≥ d·ªØ li·ªáu, th·ª≠ API debug
        if (!conferenceData) {
            try {
                console.log(`Trying debug API: api/debug_conference.php?id=${conferenceId}`);
                const response3 = await fetch(`api/debug_conference.php?id=${conferenceId}`, {
                    cache: 'no-cache',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response3.ok) {
                    const rawText3 = await response3.text();
                    console.log("Raw response from debug API:", rawText3.substring(0, 200));
                    
                    // Ki·ªÉm tra xem response c√≥ ph·∫£i l√† JSON kh√¥ng
                    if (rawText3.trim().startsWith('{') || rawText3.trim().startsWith('[')) {
                        const debugResult = JSON.parse(rawText3);
                        console.log("K·∫øt qu·∫£ debug:", debugResult);
                        
                        // N·∫øu c√≥ raw_conference_data, s·ª≠ d·ª•ng n√≥ l√†m d·ªØ li·ªáu kh·∫©n c·∫•p
                        if (debugResult.status && debugResult.raw_conference_data) {
                            conferenceData = debugResult.raw_conference_data;
                            
                            // Th√™m th√¥ng tin t·ª´ category v√† venue n·∫øu c√≥
                            if (debugResult.category_data) {
                                conferenceData.category_name = debugResult.category_data.name;
                                conferenceData.category_slug = debugResult.category_data.slug;
                                conferenceData.category_color = debugResult.category_data.color;
                            }
                            
                            if (debugResult.venue_data) {
                                conferenceData.venue_name = debugResult.venue_data.name;
                                conferenceData.venue_city = debugResult.venue_data.city;
                                conferenceData.venue_address = debugResult.venue_data.address;
                            }
                            
                            console.log("‚úÖ D·ªØ li·ªáu kh√¥i ph·ª•c t·ª´ debug API:", conferenceData);
                        }
                    } else {
                        console.warn("Debug API tr·∫£ v·ªÅ HTML thay v√¨ JSON:", rawText3.substring(0, 100));
                    }
                }
            } catch (err3) {
                console.warn("‚ùå L·ªói khi g·ªçi API debug:", err3.message);
            }
        }
        
        // 4. N·∫øu v·∫´n kh√¥ng c√≥ d·ªØ li·ªáu, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
        if (!conferenceData) {
            console.warn("üîÑ S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u do kh√¥ng th·ªÉ k·∫øt n·ªëi API");
            conferenceData = getFallbackConferenceData(conferenceId);
        }
        
        // Hi·ªÉn th·ªã d·ªØ li·ªáu h·ªôi ngh·ªã
        if (conferenceData) {
            await displayConferenceData(conferenceData, conferenceId);
        } else {
            showConferenceNotFound();
        }
        
    } catch (error) {
        console.error("‚ùå L·ªói chung khi t·∫£i th√¥ng tin h·ªôi ngh·ªã:", error);
        // S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u trong tr∆∞·ªùng h·ª£p l·ªói nghi√™m tr·ªçng
        const fallbackData = getFallbackConferenceData(conferenceId);
        await displayConferenceData(fallbackData, conferenceId);
    }
}

// Hi·ªÉn th·ªã loading indicator
function showLoadingIndicator() {
    const heroSection = document.getElementById('hero-section');
    if (heroSection) {
        // Hi·ªÉn th·ªã loading trong hero section
        document.getElementById('conference-title').textContent = 'ƒêang t·∫£i...';
        document.getElementById('conference-description').textContent = 'ƒêang t·∫£i th√¥ng tin h·ªôi ngh·ªã...';
        document.getElementById('conference-date').textContent = 'ƒêang t·∫£i...';
        document.getElementById('conference-location').textContent = 'ƒêang t·∫£i...';
        document.getElementById('conference-attendees').textContent = 'ƒêang t·∫£i...';
        
        // C·∫≠p nh·∫≠t detailed description
        const detailedDescElement = document.getElementById('detailed-description');
        if (detailedDescElement) {
            detailedDescElement.textContent = 'ƒêang t·∫£i th√¥ng tin chi ti·∫øt...';
        }
    }
}

// Hi·ªÉn th·ªã d·ªØ li·ªáu h·ªôi ngh·ªã
async function displayConferenceData(conferenceData, conferenceId) {
    try {
        // Update page title
        document.title = `ConferenceHub - ${conferenceData.title}`;
        
        // Update hero section
        if (typeof updateHeroSection === 'function') {
            updateHeroSection(conferenceData);
        } else {
            updateHeroSectionFallback(conferenceData);
        }
        
        // Render conference details
        if (typeof updateConferenceDetails === 'function') {
            updateConferenceDetails(conferenceData);
        }
        
        // Update c√°c ph·∫ßn kh√°c d·ª±a tr√™n d·ªØ li·ªáu c√≥ s·∫µn
        if (typeof updateObjectivesAndFeatures === 'function') {
            updateObjectivesAndFeatures(conferenceData);
        } else {
            updateObjectivesAndFeaturesFallback(conferenceData);
        }
        
        // Update audience section
        updateAudienceSection(conferenceData);
        
        // Update venue details
        updateVenueDetails(conferenceData);
        
        if (typeof renderFAQ === 'function') {
            renderFAQ(conferenceData);
        } else {
            renderFAQFallback(conferenceData);
        }
        
        if (typeof renderSponsors === 'function') {
            renderSponsors(conferenceData);
        }
        
        // Load speakers v√† schedule
        await loadSpeakersWithFallback(conferenceId);
        await loadAgendaWithFallback(conferenceId);
        
        // Load h·ªôi ngh·ªã li√™n quan
        if (typeof loadRelatedConferences === 'function') {
            await loadRelatedConferences(conferenceId);
        } else {
            await loadRelatedConferencesFallback(conferenceId);
        }
        
    } catch (error) {
        console.error("L·ªói khi hi·ªÉn th·ªã d·ªØ li·ªáu:", error);
    }
}

// Fallback conference data
function getFallbackConferenceData(conferenceId) {
    const fallbackData = {
        1: {
            id: 1,
            title: 'Vietnam Tech Summit 2025',
            short_description: 'H·ªôi ngh·ªã c√¥ng ngh·ªá l·ªõn nh·∫•t Vi·ªát Nam nƒÉm 2025',
            description: 'H·ªôi ngh·ªã t·∫≠p trung v√†o c√°c xu h∆∞·ªõng c√¥ng ngh·ªá m·ªõi nh∆∞ AI, Blockchain, IoT v√† Digital Transformation. S·ª± ki·ªán quy t·ª• h∆°n 1000 chuy√™n gia c√¥ng ngh·ªá h√†ng ƒë·∫ßu t·ª´ kh·∫Øp n∆°i tr√™n th·∫ø gi·ªõi.',
            start_date: '2025-08-15 08:00:00',
            end_date: '2025-08-16 18:00:00',
            category_name: 'C√¥ng ngh·ªá',
            venue_name: 'Trung t√¢m H·ªôi ngh·ªã Qu·ªëc gia',
            venue_city: 'TP. H·ªì Ch√≠ Minh',
            location: 'TP. H·ªì Ch√≠ Minh',
            price: 2500000,
            capacity: 1000,
            current_attendees: 450,
            image: 'https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=800&h=600&fit=crop',
            banner_image: 'https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=1200&h=600&fit=crop'
        },
        2: {
            id: 2,
            title: 'Startup Weekend Ho Chi Minh 2025',
            short_description: 'Cu·ªëi tu·∫ßn kh·ªüi nghi·ªáp d√†nh cho c√°c b·∫°n tr·∫ª c√≥ √Ω t∆∞·ªüng kinh doanh',
            description: 'S·ª± ki·ªán 54 gi·ªù li√™n t·ª•c gi√∫p c√°c b·∫°n tr·∫ª bi·∫øn √Ω t∆∞·ªüng th√†nh startup th·ª±c t·∫ø. C√≥ s·ª± tham gia c·ªßa c√°c mentor v√† nh√† ƒë·∫ßu t∆∞ h√†ng ƒë·∫ßu.',
            start_date: '2025-07-11 18:00:00',
            end_date: '2025-07-13 20:00:00',
            category_name: 'Kh·ªüi nghi·ªáp',
            venue_name: 'Saigon Innovation Hub',
            venue_city: 'TP. H·ªì Ch√≠ Minh',
            location: 'TP. H·ªì Ch√≠ Minh',
            price: 500000,
            capacity: 200,
            current_attendees: 85,
            image: 'https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?w=800&h=600&fit=crop',
            banner_image: 'https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?w=1200&h=600&fit=crop'
        }
    };
    
    return fallbackData[conferenceId] || fallbackData[1];
}

// Fallback hero section update
function updateHeroSectionFallback(conference) {
    const startDate = new Date(conference.start_date);
    const dateFormatted = startDate.toLocaleDateString('vi-VN', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    
    let dateDisplay = dateFormatted;
    
    // If conference has an end date, format it as a range
    if (conference.end_date) {
        const endDate = new Date(conference.end_date);
        const endDateFormatted = endDate.toLocaleDateString('vi-VN', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        dateDisplay = `${dateFormatted} - ${endDateFormatted}`;
    }

    const priceFormatted = parseInt(conference.price).toLocaleString('vi-VN', {
        style: 'currency',
        currency: 'VND',
        maximumFractionDigits: 0
    });    // Update hero section content
    document.getElementById('conference-category').textContent = conference.category_name || 'H·ªôi ngh·ªã';
    document.getElementById('conference-title').textContent = conference.title;
    document.getElementById('conference-description').textContent = conference.short_description || conference.description;
    document.getElementById('conference-date').textContent = dateDisplay;
    document.getElementById('conference-location').textContent = conference.venue_name ? `${conference.venue_name}, ${conference.venue_city}` : conference.location;
    
    // Update detailed description section
    const detailedDescElement = document.getElementById('detailed-description');
    if (detailedDescElement) {
        detailedDescElement.textContent = conference.description || conference.short_description || 'Th√¥ng tin chi ti·∫øt s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªõm.';
    }
    
    // Handle attendees data if available
    if (conference.current_attendees !== undefined && conference.capacity !== undefined) {
        document.getElementById('conference-attendees').textContent = `${conference.current_attendees}/${conference.capacity} ng∆∞·ªùi tham d·ª±`;
        document.getElementById('spots-remaining').textContent = `C√≤n ${conference.capacity - conference.current_attendees} ch·ªó tr·ªëng`;
    }
    
    document.getElementById('conference-price').textContent = priceFormatted;
    
    // Update hero background if image available
    const heroSection = document.getElementById('hero-section');
    const conferenceImage = conference.banner_image || conference.image;
    if (conferenceImage) {
        heroSection.style.backgroundImage = `linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url('${conferenceImage}')`;
    }
}

// Load speakers with fallback
async function loadSpeakersWithFallback(conferenceId) {
    const speakersContainer = document.getElementById('speakers-section');
    if (!speakersContainer) return;
    
    try {
        // Th·ª≠ API speakers
        const response = await fetch(`api/conferences.php?id=${conferenceId}&speakers=1`, {
            cache: 'no-cache',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        if (response.ok) {
            const rawText = await response.text();
            if (rawText.trim().startsWith('{') || rawText.trim().startsWith('[')) {
                const result = JSON.parse(rawText);
                if (result.status && result.data && result.data.length > 0) {
                    const speakers = result.data;
                    displaySpeakers(speakers);
                    return;
                }
            }
        }
    } catch (error) {
        console.warn("L·ªói khi t·∫£i speakers:", error);
    }
    
    // Fallback speakers data
    const fallbackSpeakers = [
        {
            name: "Nguy·ªÖn Minh Tu·∫•n",
            title: "Chief Technology Officer",
            company: "FPT Software",
            bio: "CTO FPT Software, chuy√™n gia AI v·ªõi 15+ nƒÉm kinh nghi·ªám",
            image: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face"
        },
        {
            name: "Dr. L√™ Th·ªã H∆∞∆°ng",
            title: "Director of AI Research", 
            company: "Vingroup",
            bio: "Gi√°m ƒë·ªëc Nghi√™n c·ª©u AI Vingroup, chuy√™n gia Healthcare AI",
            image: "https://images.unsplash.com/photo-1494790108755-2616b62dd6c3?w=400&h=400&fit=crop&crop=face"
        }
    ];
    
    displaySpeakers(fallbackSpeakers);
}

// Display speakers
function displaySpeakers(speakers) {
    const speakersContainer = document.getElementById('speakers-section');
    if (!speakersContainer) return;
    
    const speakersHtml = speakers.map(speaker => `
        <div class="col-md-6 mb-4">
            <div class="speaker-card card h-100">
                <div class="card-body text-center">
                    <img src="${speaker.image}" 
                         class="rounded-circle mb-3" width="120" height="120" alt="${speaker.name}">
                    <h5 class="card-title">${speaker.name}</h5>
                    <p class="text-primary mb-2">${speaker.title}${speaker.company ? `, ${speaker.company}` : ''}</p>
                    <p class="card-text">${speaker.bio || 'Chuy√™n gia h√†ng ƒë·∫ßu trong lƒ©nh v·ª±c'}</p>
                </div>
            </div>
        </div>
    `).join('');
    
    speakersContainer.innerHTML = speakersHtml;
}

// Load agenda with fallback
async function loadAgendaWithFallback(conferenceId) {
    const agendaContainer = document.getElementById('agendaAccordion');
    if (!agendaContainer) return;
    
    try {
        // Th·ª≠ API schedule
        const response = await fetch(`api/conferences.php?id=${conferenceId}&schedule=1`, {
            cache: 'no-cache',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        if (response.ok) {
            const rawText = await response.text();
            if (rawText.trim().startsWith('{') || rawText.trim().startsWith('[')) {
                const result = JSON.parse(rawText);
                if (result.status && result.data && result.data.length > 0) {
                    const schedule = result.data;
                    displaySchedule(schedule);
                    return;
                }
            }
        }
    } catch (error) {
        console.warn("L·ªói khi t·∫£i schedule:", error);
    }
    
    // Fallback schedule data
    const fallbackSchedule = [
        {
            session_date: '2025-08-15',
            start_time: '09:00',
            end_time: '10:00',
            title: 'Khai m·∫°c h·ªôi ngh·ªã',
            description: 'L·ªÖ khai m·∫°c v√† gi·ªõi thi·ªáu ch∆∞∆°ng tr√¨nh',
            speaker_name: 'Ban t·ªï ch·ª©c'
        },
        {
            session_date: '2025-08-15',
            start_time: '10:30',
            end_time: '11:30',
            title: 'Keynote: T∆∞∆°ng lai c·ªßa AI',
            description: 'Ph√¢n t√≠ch xu h∆∞·ªõng AI trong t∆∞∆°ng lai',
            speaker_name: 'Nguy·ªÖn Minh Tu·∫•n'
        }
    ];
    
    displaySchedule(fallbackSchedule);
}

// Display schedule
function displaySchedule(schedule) {
    const agendaContainer = document.getElementById('agendaAccordion');
    if (!agendaContainer) return;
    
    // Group schedule by day
    const scheduleByDay = {};
    schedule.forEach(item => {
        const eventDate = item.session_date || item.eventDate;
        if (!scheduleByDay[eventDate]) {
            scheduleByDay[eventDate] = [];
        }
        scheduleByDay[eventDate].push(item);
    });
    
    // Create tabs for days
    let daysHtml = '';
    let tabPanesHtml = '';
    let isFirst = true;
    
    Object.keys(scheduleByDay).forEach(day => {
        const date = new Date(day);
        const formattedDate = date.toLocaleDateString('vi-VN', {
            weekday: 'long',
            day: 'numeric',
            month: 'numeric'
        });
        
        const tabId = `tab-${day.replace(/\-/g, '')}`;
        const activeClass = isFirst ? 'active' : '';
        
        daysHtml += `
            <li class="nav-item" role="presentation">
                <button class="nav-link ${activeClass}" id="${tabId}-tab" data-bs-toggle="tab" 
                        data-bs-target="#${tabId}" type="button" role="tab" 
                        aria-controls="${tabId}" aria-selected="${isFirst ? 'true' : 'false'}">
                    ${formattedDate}
                </button>
            </li>
        `;
        
        let dayScheduleHtml = '';
        scheduleByDay[day].forEach(item => {
            const startTime = item.start_time || item.startTime;
            const endTime = item.end_time || item.endTime;
            const speaker = item.speaker_name || item.speaker || '';
            
            dayScheduleHtml += `
                <div class="timeline-item">
                    <span class="badge bg-primary mb-2">${startTime} - ${endTime}</span>
                    <h5 class="fw-bold mb-1">${item.title}</h5>
                    ${speaker ? `<p class="mb-2 text-primary"><i class="fas fa-user me-1"></i>${speaker}</p>` : ''}
                    <p class="mb-0">${item.description || ''}</p>
                </div>
            `;
        });
        
        tabPanesHtml += `
            <div class="tab-pane fade ${isFirst ? 'show active' : ''}" id="${tabId}" role="tabpanel" aria-labelledby="${tabId}-tab">
                ${dayScheduleHtml}
            </div>
        `;
        
        isFirst = false;
    });
    
    const agendaHtml = `
        <ul class="nav nav-tabs mb-4" id="dayTabs" role="tablist">
            ${daysHtml}
        </ul>
        <div class="tab-content" id="dayTabsContent">
            ${tabPanesHtml}
        </div>
    `;
    
    agendaContainer.innerHTML = agendaHtml;
}

// Update objectives and features fallback
function updateObjectivesAndFeaturesFallback(conference) {
    // Update objectives list
    const objectivesList = document.getElementById('objectives-list');
    if (objectivesList) {
        const objectives = conference.objectives || [
            'N·∫Øm b·∫Øt c√°c xu h∆∞·ªõng c√¥ng ngh·ªá m·ªõi nh·∫•t',
            'Networking v·ªõi c√°c chuy√™n gia h√†ng ƒë·∫ßu',
            'T√¨m hi·ªÉu v·ªÅ c√°c gi·∫£i ph√°p ·ª©ng d·ª•ng th·ª±c t·∫ø',
            'C·∫≠p nh·∫≠t ki·∫øn th·ª©c v√† k·ªπ nƒÉng chuy√™n m√¥n'
        ];
        
        const objectivesHtml = objectives.map(objective => 
            `<li><i class="fas fa-check text-primary me-2"></i>${objective}</li>`
        ).join('');
        
        objectivesList.innerHTML = objectivesHtml;
    }
    
    // Update features list
    const featuresList = document.getElementById('features-list');
    if (featuresList) {
        const features = conference.features || [
            {
                icon: 'fas fa-users',
                title: 'Networking',
                description: 'K·∫øt n·ªëi v·ªõi chuy√™n gia v√† doanh nghi·ªáp'
            },
            {
                icon: 'fas fa-certificate',
                title: 'Ch·ª©ng ch·ªâ',
                description: 'Nh·∫≠n ch·ª©ng ch·ªâ tham d·ª± c√≥ gi√° tr·ªã'
            },
            {
                icon: 'fas fa-gift',
                title: 'Qu√† t·∫∑ng',
                description: 'Qu√† t·∫∑ng v√† t√†i li·ªáu ƒë·ªôc quy·ªÅn'
            },
            {
                icon: 'fas fa-utensils',
                title: 'ƒÇn u·ªëng',
                description: 'Buffet cao c·∫•p v√† coffee break'
            }
        ];
        
        const featuresHtml = features.map(feature => 
            `<div class="col-md-6 mb-3">
                <div class="d-flex align-items-start">
                    <div class="feature-icon me-3">
                        <i class="${feature.icon} fa-2x text-primary"></i>
                    </div>
                    <div>
                        <h6 class="fw-bold mb-1">${feature.title}</h6>
                        <p class="mb-0 text-muted">${feature.description}</p>
                    </div>
                </div>
            </div>`
        ).join('');
        
        featuresList.innerHTML = featuresHtml;
    }
}

// Update audience section
function updateAudienceSection(conference) {
    const audienceSection = document.getElementById('audience-section');
    if (audienceSection) {
        const audiences = conference.target_audience || [
            {
                title: 'L·∫≠p tr√¨nh vi√™n',
                description: 'Developers mu·ªën c·∫≠p nh·∫≠t c√¥ng ngh·ªá m·ªõi',
                icon: 'fas fa-code'
            },
            {
                title: 'Qu·∫£n l√Ω d·ª± √°n',
                description: 'PM/BA quan t√¢m ƒë·∫øn digital transformation',
                icon: 'fas fa-tasks'
            },
            {
                title: 'Startup',
                description: 'Founder t√¨m ki·∫øm c∆° h·ªôi v√† ƒë·ªëi t√°c',
                icon: 'fas fa-rocket'
            },
            {
                title: 'Sinh vi√™n',
                description: 'Sinh vi√™n IT mu·ªën m·ªü r·ªông ki·∫øn th·ª©c',
                icon: 'fas fa-graduation-cap'
            }
        ];
        
        const audienceHtml = audiences.map(audience => 
            `<div class="col-md-6 mb-4">
                <div class="text-center">
                    <div class="audience-icon mb-3">
                        <i class="${audience.icon} fa-3x text-primary"></i>
                    </div>
                    <h5 class="fw-bold mb-2">${audience.title}</h5>
                    <p class="text-muted">${audience.description}</p>
                </div>
            </div>`
        ).join('');
        
        audienceSection.innerHTML = audienceHtml;
    }
}

// Update venue details
function updateVenueDetails(conference) {
    const venueDetails = document.getElementById('venue-details');
    if (venueDetails) {
        const venueName = conference.venue_name || 'ƒê·ªãa ƒëi·ªÉm s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o';
        const venueAddress = conference.venue_address || conference.location || 'ƒê·ªãa ch·ªâ s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t';
        const venueCity = conference.venue_city || '';
        
        const venueHtml = `
            <h5 class="card-title mb-3">
                <i class="fas fa-map-marker-alt text-primary me-2"></i>${venueName}
            </h5>
            <p class="mb-2">
                <i class="fas fa-location-dot me-2"></i>
                <strong>ƒê·ªãa ch·ªâ:</strong> ${venueAddress}${venueCity ? `, ${venueCity}` : ''}
            </p>
            <p class="mb-2">
                <i class="fas fa-car me-2"></i>
                <strong>ƒê·ªó xe:</strong> C√≥ b√£i ƒë·ªó xe mi·ªÖn ph√≠
            </p>
            <p class="mb-0">
                <i class="fas fa-bus me-2"></i>
                <strong>Giao th√¥ng:</strong> Thu·∫≠n ti·ªán di chuy·ªÉn b·∫±ng xe bu√Ωt v√† taxi
            </p>
        `;
        
        venueDetails.innerHTML = venueHtml;
    }
    
    // Update venue map
    const venueMap = document.getElementById('venue-map');
    if (venueMap) {
        const mapHtml = `
            <div class="embed-responsive embed-responsive-16by9">
                <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3919.4205729999!2d106.692430515427!3d10.776530462205!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x31752f4b3bb0ee67%3A0x1e1c4c2d1e1e1e1e!2sVietnam%20National%20Convention%20Center!5e0!3m2!1sen!2s!4v1234567890123!5m2!1sen!2s" 
                        width="100%" height="300" style="border:0;" allowfullscreen="" loading="lazy" 
                        referrerpolicy="no-referrer-when-downgrade" class="rounded">
                </iframe>
            </div>
        `;
        
        venueMap.innerHTML = mapHtml;
    }
}

// Render FAQ fallback
function renderFAQFallback(conference) {
    const faqAccordion = document.getElementById('faqAccordion');
    if (faqAccordion) {
        const faqs = conference.faqs || [
            {
                question: 'T√¥i c√≥ c·∫ßn mang laptop kh√¥ng?',
                answer: 'C√≥, b·∫°n n√™n mang laptop ƒë·ªÉ tham gia c√°c workshop th·ª±c h√†nh. Ch√∫ng t√¥i c≈©ng cung c·∫•p WiFi mi·ªÖn ph√≠.'
            },
            {
                question: 'C√≥ c·∫•p ch·ª©ng ch·ªâ tham d·ª± kh√¥ng?',
                answer: 'C√≥, t·∫•t c·∫£ h·ªçc vi√™n ho√†n th√†nh kh√≥a h·ªçc s·∫Ω nh·∫≠n ƒë∆∞·ª£c ch·ª©ng ch·ªâ tham d·ª± c√≥ gi√° tr·ªã.'
            },
            {
                question: 'C√≥ h·ªó tr·ª£ ƒÉn u·ªëng kh√¥ng?',
                answer: 'C√≥, ch√∫ng t√¥i cung c·∫•p coffee break v√† buffet tr∆∞a cho t·∫•t c·∫£ ng∆∞·ªùi tham d·ª±.'
            }
        ];
        
        // T√¨m c√°c accordion item hi·ªán c√≥ v√† c·∫≠p nh·∫≠t n·ªôi dung
        faqs.forEach((faq, index) => {
            const faqId = `faq${index + 1}`;
            const questionElement = document.querySelector(`#${faqId} ~ .accordion-header button`);
            const answerElement = document.querySelector(`#${faqId} .accordion-body`);
            
            if (questionElement) {
                questionElement.textContent = faq.question;
            }
            if (answerElement) {
                answerElement.textContent = faq.answer;
            }
        });
    }
}

function showConferenceNotFound() {
    const mainContainer = document.querySelector('.container.my-5');
    if (mainContainer) {
        mainContainer.innerHTML = `
            <div class="container py-5 text-center">
                <div class="alert alert-warning">
                    <h3>Kh√¥ng t√¨m th·∫•y h·ªôi ngh·ªã</h3>
                    <p>H·ªôi ngh·ªã b·∫°n ƒëang t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.</p>
                    <a href="conferences.html" class="btn btn-primary">Xem t·∫•t c·∫£ h·ªôi ngh·ªã</a>
                </div>
            </div>
        `;
    }
}

function showErrorMessage(message) {
    const mainContainer = document.querySelector('.container.my-5');
    if (mainContainer) {
        mainContainer.innerHTML = `
            <div class="container py-5 text-center">
                <div class="alert alert-danger">
                    <h3>ƒê√£ x·∫£y ra l·ªói</h3>
                    <p>${message}</p>
                    <div class="mt-3">
                        <a href="conferences.html" class="btn btn-primary me-2">Xem t·∫•t c·∫£ h·ªôi ngh·ªã</a>
                        <button onclick="location.reload()" class="btn btn-outline-secondary">Th·ª≠ l·∫°i</button>
                    </div>
                </div>
            </div>
        `;
    }
}

// Check if user is logged in (placeholder function)
function isLoggedIn() {
    return localStorage.getItem('user_token') !== null;
}

function joinConference() {
    const urlParams = new URLSearchParams(window.location.search);
    const conferenceId = urlParams.get('id');
    
    if (!conferenceId) {
        alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ªôi ngh·ªã.');
        return;
    }
    
    if (isLoggedIn()) {
        window.location.href = `conference-register.html?id=${conferenceId}`;
    } else {
        window.location.href = `login.html?redirect=conference-detail.html?id=${conferenceId}`;
    }
}

function shareConference() {
    const urlParams = new URLSearchParams(window.location.search);
    const conferenceId = urlParams.get('id');
    
    if (!conferenceId) {
        alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ªôi ngh·ªã ƒë·ªÉ chia s·∫ª.');
        return;
    }
    
    const conferenceTitle = document.getElementById('conference-title').textContent;
    const conferenceUrl = `${window.location.origin}/conference-detail.html?id=${conferenceId}`;
    
    if (navigator.share) {
        navigator.share({
            title: conferenceTitle,
            text: `T√¥i mu·ªën m·ªùi b·∫°n tham d·ª± h·ªôi ngh·ªã: ${conferenceTitle}`,
            url: conferenceUrl
        });
    } else {
        navigator.clipboard.writeText(conferenceUrl).then(() => {
            alert(`ƒê√£ sao ch√©p ƒë∆∞·ªùng d·∫´n: ${conferenceUrl}`);
        });
    }
}

// Load h·ªôi ngh·ªã li√™n quan fallback
async function loadRelatedConferencesFallback(conferenceId) {
    const relatedContainer = document.getElementById('related-conferences-container');
    if (!relatedContainer) return;
    
    // D·ªØ li·ªáu h·ªôi ngh·ªã li√™n quan m·∫´u
    const relatedConferences = [
        {
            id: 2,
            title: 'Startup Weekend Ho Chi Minh 2025',
            short_description: 'Cu·ªëi tu·∫ßn kh·ªüi nghi·ªáp d√†nh cho c√°c b·∫°n tr·∫ª c√≥ √Ω t∆∞·ªüng kinh doanh',
            start_date: '2025-07-11',
            location: 'TP. H·ªì Ch√≠ Minh',
            price: 500000,
            image: 'https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?w=400&h=300&fit=crop'
        },
        {
            id: 3,
            title: 'Digital Marketing Summit 2025',
            short_description: 'H·ªôi ngh·ªã Marketing s·ªë l·ªõn nh·∫•t nƒÉm',
            start_date: '2025-09-20',
            location: 'H√† N·ªôi',
            price: 1500000,
            image: 'https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=400&h=300&fit=crop'
        },
        {
            id: 4,
            title: 'Blockchain & Fintech Expo 2025',
            short_description: 'Tri·ªÉn l√£m c√¥ng ngh·ªá Blockchain v√† Fintech',
            start_date: '2025-10-15',
            location: 'ƒê√† N·∫µng',
            price: 2000000,
            image: 'https://images.unsplash.com/photo-1639762681485-074b7f938ba0?w=400&h=300&fit=crop'
        }
    ];
    
    // Filter out current conference
    const filteredConferences = relatedConferences.filter(conf => conf.id != conferenceId);
    
    const relatedHtml = filteredConferences.map(conf => {
        const startDate = new Date(conf.start_date);
        const dateFormatted = startDate.toLocaleDateString('vi-VN', {
            day: 'numeric',
            month: 'numeric',
            year: 'numeric'
        });
        
        const priceFormatted = parseInt(conf.price).toLocaleString('vi-VN', {
            style: 'currency',
            currency: 'VND',
            maximumFractionDigits: 0
        });
        
        return `
            <div class="col-md-4 mb-4">
                <div class="card conference-card h-100">
                    <img src="${conf.image}" class="card-img-top" alt="${conf.title}" style="height: 200px; object-fit: cover;">
                    <div class="card-body d-flex flex-column">
                        <h6 class="card-title">${conf.title}</h6>
                        <p class="card-text text-muted small flex-grow-1">${conf.short_description}</p>
                        <div class="mt-auto">
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="fas fa-calendar me-1"></i>${dateFormatted}
                                </small>
                                <span class="badge bg-primary">${priceFormatted}</span>
                            </div>
                            <div class="mt-2">
                                <small class="text-muted">
                                    <i class="fas fa-map-marker-alt me-1"></i>${conf.location}
                                </small>
                            </div>
                            <a href="conference-detail.html?id=${conf.id}" class="btn btn-outline-primary btn-sm mt-2 w-100">
                                Xem chi ti·∫øt
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }).join('');
    
    relatedContainer.innerHTML = relatedHtml;
}
